@model IEnumerable<VeryTimekeeper.Models.Task>

@{
    ViewData["Title"] = "Tasks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<script type="text/javascript">
    var allTasks = @Html.Raw(Json.Serialize(Model));

</script>*@

<script>
    $(function () {
        $("#sortable").sortable({
            update: function () {
                resetTasks();
            }
        });

        $("#sortable").disableSelection();
    });
</script>

<div>
    @Html.ActionLink("Create new task", "Create")
</div>

<hr />
<button onclick="startTimer()" class="start btn btn-success" data-request-url="@Url.Action("UpdateTaskTime", "Tasks")">Start</button>
<button class="reset btn btn-default" data-request-url="@Url.Action("ListTasks", "Tasks")" onclick="resetTasks()">Reset tasks</button>
<button class="pause btn btn-warning" data-request-url="@Url.Action("UpdateTaskTime", "Tasks")">Pause</button>





<div id="all-tasks">
    <ul id="sortable" class="list-unstyled ui-sortable task-list">
        @foreach (var task in Model)
        {
            <li class="single-task ui-state-default" id="single-task@(task.TaskId)">
                <span class="task-title">@Html.DisplayFor(modelTask => task.Content)</span> 
                <span class="time-remaining" id="timer@(task.TaskId)">@Html.DisplayFor(modelTask => task.timeRemaining)</span> <br />
                <span class="time-complete">@Html.DisplayFor(modelTask => task.timeToFinish)</span>
            </li>

        }
    </ul>
</div>

<div id="finished-tasks" data-request-url="@Url.Action("ListFinishedTasks", "Tasks")">

</div>



